{"version":3,"sources":["Home.js","FoodFinder.js","index.js","../node_modules/@opentelemetry/core/build/src/trace/instrumentation sync"],"names":["Home","to","FoodFinder","state","results","isLoading","ingredient","this","setState","fetch","gcpBase","then","res","json","data","Object","keys","length","list","entries","map","i","key","value","price","stock","Row","Col","lg","Button","onClick","buttonHandler","md","id","renderResults","Component","webTracer","WebTracerProvider","plugins","DocumentLoad","collectorOptions","url","exporter","CollectorExporter","addSpanProcessor","SimpleSpanProcessor","scopeManager","ZoneScopeManager","XMLHttpRequestPlugin","ignoreUrls","BatchSpanProcessor","ReactDOM","render","exact","path","component","document","getElementById","webpackEmptyContext","req","e","Error","code","resolve","module","exports"],"mappings":"6JAeeA,EAZF,WACT,OACI,6BACI,sDAGA,kBAAC,IAAD,CAAMC,GAAG,SAAQ,4C,mEC0FdC,E,kDA3FX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAS,KACTC,WAAW,GAJN,E,0DAQCC,GAAa,IAAD,OACtBC,KAAKC,SAAS,CAACH,WAAW,IAE1BI,MAAMC,6DAA4BJ,GAC7BK,MAAK,SAAAC,GAIF,OAFWA,EAAIC,UAGhBF,MAAK,SAAAG,GAEJ,EAAKN,SACD,CAACJ,QAASU,EACVR,WAAYA,EACZD,WAAW,S,sCAMvB,GAAGE,KAAKJ,MAAME,UACV,OAAO,oDAEX,GAAyB,MAAtBE,KAAKJ,MAAMC,QAAd,CAGA,GAA8C,IAA3CW,OAAOC,KAAKT,KAAKJ,MAAMC,SAASa,OAC/B,OAAO,gDAAsBV,KAAKJ,MAAMG,WAAjC,cAEX,IAAIY,EAAOH,OAAOI,QAAQZ,KAAKJ,MAAMC,SAASgB,KAAI,WAAeC,GAAO,IAAD,mBAAnBC,EAAmB,KAAdC,EAAc,KACnE,OACI,6BACKD,EADL,MACaC,EAAMC,MADnB,kBACyCD,EAAME,UAIvD,OACI,6CACkBlB,KAAKJ,MAAMG,WACzB,6BACKY,O,+BAOP,IAAD,OACL,OACI,6BACI,2CACA,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,WAA1C,gBAIJ,kBAACJ,EAAA,EAAD,CAAKK,GAAG,KACJ,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,WAA1C,iBAIJ,kBAACJ,EAAA,EAAD,CAAKK,GAAG,KACJ,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,UAA1C,eAIJ,kBAACJ,EAAA,EAAD,CAAKK,GAAG,KACJ,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,WAA1C,gBAKR,+CACA,yBAAKE,GAAG,WACH1B,KAAK2B,sB,GApFDC,a,gDCYnBC,EAAY,IAAIC,oBAAkB,CACtCC,QAAS,CACP,IAAIC,kBAGFC,EAAmB,CACvBC,IATmB,mCAWfC,EAAW,IAAIC,oBAAkBH,GACvCJ,EAAUQ,iBAAiB,IAAIC,sBAAoBH,IAEzB,IAAIL,oBAAkB,CAC/CS,aAAc,IAAIC,mBAClBT,QAAS,CACP,IAAIU,uBAAqB,CAC1BC,WAAY,CAAC,OAAQ,eAQHL,iBAAiB,IAAIM,qBAAmBR,IA+B5DS,IAASC,OACR,kBAAC,IAAD,KACE,8BACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvD,IACjC,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,QAAQC,UAAWrD,MAGxCsD,SAASC,eAAe,U,sDChFzB,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoB1C,KAAO,WAAa,MAAO,IAC/C0C,EAAoBK,QAAUL,EAC9BM,EAAOC,QAAUP,EACjBA,EAAoBzB,GAAK,K","file":"static/js/main.3fb6d5de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>\n                Welcome to FoodFinder!\n            </h1>\n            <Link to='/find'><button>Enter</button></Link>\n        </div>\n    )\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Button, Row, Col } from 'reactstrap';\n\n\nconst gcpBase = 'https://healthy-earth-276916.ue.r.appspot.com';\nconst localBase = 'http://penguin.termina.linux.test:8080';\n\nclass FoodFinder extends Component {\n    constructor(){\n        super()\n        this.state = {\n            results: null,\n            isLoading: false\n        }\n    }\n\n    buttonHandler(ingredient) {\n        this.setState({isLoading: true})\n        // alert('fetching ' + ingredient);\n        fetch(gcpBase + '/find-server/' + ingredient)\n            .then(res => {\n                // alert(res);\n                let json = res.json()\n                // alert(json);\n                return json\n            }).then(data => {\n                // alert(\"then?\")\n                this.setState(\n                    {results: data, \n                    ingredient: ingredient,\n                    isLoading: false}\n                );\n            })\n    }\n\n    renderResults(){\n        if(this.state.isLoading){\n            return <div> Loading vendors...</div>;\n        }\n        if(this.state.results == null){ \n            return;\n        }\n        if(Object.keys(this.state.results).length === 0){\n            return <div>No vendors have {this.state.ingredient} in stock.</div>\n        }\n        let list = Object.entries(this.state.results).map(([key, value], i) => {\n            return (\n                <div>\n                    {key}: ${value.price}, Inventory of {value.stock}\n                </div>\n            )\n        });\n        return (\n            <div>\n                Vendors for: {this.state.ingredient}\n                <div>\n                    {list}\n                </div>\n            </div>\n        )\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Food Finder</h1>\n                <Row>\n                    <Col lg=\"3\">\n                        <Button onClick={() => this.buttonHandler('apple')}>\n                            Find Apples\n                        </Button>\n                    </Col>\n                    <Col md=\"3\">\n                        <Button onClick={() => this.buttonHandler('peach')}>\n                            Find Peaches\n                        </Button>\n                    </Col>\n                    <Col md=\"3\">\n                        <Button onClick={() => this.buttonHandler('pear')}>\n                            Find Pears\n                        </Button>\n                    </Col>\n                    <Col md=\"3\">\n                        <Button onClick={() => this.buttonHandler('flour')}>\n                            Find Flour\n                        </Button>\n                    </Col>\n                </Row>\n                <h2>Vendor Options:</h2>\n                <div id=\"results\">\n                    {this.renderResults()}\n                </div>\n            </div>\n        )\n    }\n\n}\n        \nexport default FoodFinder;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home';\nimport FoodFinder from './FoodFinder';\nimport { CollectorExporter } from '@opentelemetry/exporter-collector';\nimport { SimpleSpanProcessor } from '@opentelemetry/tracing';\nimport { DocumentLoad } from '@opentelemetry/plugin-document-load';\nimport { WebTracerProvider } from '@opentelemetry/web';\n\nimport { BatchSpanProcessor } from '@opentelemetry/tracing';\nimport { XMLHttpRequestPlugin } from '@opentelemetry/plugin-xml-http-request';\nimport { ZoneScopeManager } from '@opentelemetry/scope-zone';\n\n// Edit this to point to the app to the OpenTelemetry Collector address:\n// If running locally use http://localhost:55678/v1/trace\nconst collectorURL = 'http://34.69.66.237:80/v1/trace';\n// const collectorURL = 'http://35.188.162.236/v1/trace';\n\nconst webTracer = new WebTracerProvider({\n  plugins: [\n    new DocumentLoad(),\n  ],\n});\nconst collectorOptions = {\n  url: collectorURL,\n};\nconst exporter = new CollectorExporter(collectorOptions);\nwebTracer.addSpanProcessor(new SimpleSpanProcessor(exporter));\n\nconst webTracerWithZone = new WebTracerProvider({\n\tscopeManager: new ZoneScopeManager(),\n\tplugins: [\n\t  new XMLHttpRequestPlugin({\n\t\tignoreUrls: ['/log', '/trace'],\n\t  }),\n\t],\n  });\n//   const collectorOptions2 = {\n// \turl: collectorURL,\n//   };\n//   const exporter2 = new CollectorExporter(collectorOptions2);\n  webTracerWithZone.addSpanProcessor(new BatchSpanProcessor(exporter));\n// // Minimum required setup - supports only synchronous operations\n// const provider = new WebTracerProvider({\n// \tplugins: [\n// \t  new DocumentLoad()\n// \t]\n//   });\n\n//   const collectorURL = 'http://34.69.66.237:80/v1/trace';\n//   const collectorOptions = {\n// \turl: collectorURL,\n// \t};\n// const exporter = new CollectorExporter(collectorOptions);\n  \n//   provider.addSpanProcessor(new SimpleSpanProcessor(exporter));\n//   provider.register();\n  \n//   const providerWithZone = new WebTracerProvider({\n// \tplugins: [\n// \t  new DocumentLoad()\n// \t]\n//   });\n\n  \n//   providerWithZone.addSpanProcessor(new SimpleSpanProcessor(exporter));\n  \n//   // Changing default contextManager to use ZoneContextManager - supports asynchronous operations\n//   providerWithZone.register({\n// \tcontextManager: new ZoneContextManager(),\n//   });\n\nReactDOM.render(\n\t<Router>\n\t  <main>\n\t\t  <Route exact path='/' component={Home}/>\n\t\t  <Route exact path='/find' component={FoodFinder}/>\n\t  </main>\n\t</Router>\n,document.getElementById('root'));\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 98;"],"sourceRoot":""}