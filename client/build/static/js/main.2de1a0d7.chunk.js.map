{"version":3,"sources":["../node_modules/@opentelemetry/plugin-document-load/node_modules/@opentelemetry/core/build/src/trace/instrumentation sync","Home.js","FoodFinder.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Home","to","FoodFinder","state","results","isLoading","ingredient","this","setState","fetch","gcpBase","then","res","json","data","Object","length","list","entries","map","i","key","value","price","stock","Row","Col","lg","Button","onClick","buttonHandler","md","renderResults","Component","provider","WebTracerProvider","plugins","DocumentLoad","collectorOptions","url","exporter","CollectorExporter","addSpanProcessor","SimpleSpanProcessor","register","providerWithZone","contextManager","ZoneContextManager","ReactDOM","render","exact","path","component","document","getElementById"],"mappings":"yHAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,6FCOVC,EAZF,WACT,OACI,6BACI,sDAGA,kBAAC,IAAD,CAAMC,GAAG,SAAQ,4C,wEC0FdC,E,kDA3FX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAS,KACTC,WAAW,GAJN,E,0DAQCC,GAAa,IAAD,OACtBC,KAAKC,SAAS,CAACH,WAAW,IAE1BI,MAAMC,6DAA4BJ,GAC7BK,MAAK,SAAAC,GAIF,OAFWA,EAAIC,UAGhBF,MAAK,SAAAG,GAEJ,EAAKN,SACD,CAACJ,QAASU,EACVR,WAAYA,EACZD,WAAW,S,sCAMvB,GAAGE,KAAKJ,MAAME,UACV,OAAO,oDAEX,GAAyB,MAAtBE,KAAKJ,MAAMC,QAAd,CAGA,GAA8C,IAA3CW,OAAOpB,KAAKY,KAAKJ,MAAMC,SAASY,OAC/B,OAAO,gDAAsBT,KAAKJ,MAAMG,WAAjC,cAEX,IAAIW,EAAOF,OAAOG,QAAQX,KAAKJ,MAAMC,SAASe,KAAI,WAAeC,GAAO,IAAD,mBAAnBC,EAAmB,KAAdC,EAAc,KACnE,OACI,6BACKD,EADL,MACaC,EAAMC,MADnB,kBACyCD,EAAME,UAIvD,OACI,6CACkBjB,KAAKJ,MAAMG,WACzB,6BACKW,O,+BAOP,IAAD,OACL,OACI,6BACI,2CACA,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,WAA1C,gBAIJ,kBAACJ,EAAA,EAAD,CAAKK,GAAG,KACJ,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,WAA1C,iBAIJ,kBAACJ,EAAA,EAAD,CAAKK,GAAG,KACJ,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,UAA1C,eAIJ,kBAACJ,EAAA,EAAD,CAAKK,GAAG,KACJ,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,cAAc,WAA1C,gBAKR,+CACA,yBAAK/B,GAAG,WACHQ,KAAKyB,sB,GApFDC,a,0CCsBnBC,EAAW,IAAIC,oBAAkB,CACtCC,QAAS,CACP,IAAIC,kBAKCC,EAAmB,CAC1BC,IAFsB,qCAIjBC,EAAW,IAAIC,oBAAkBH,GAErCJ,EAASQ,iBAAiB,IAAIC,sBAAoBH,IAClDN,EAASU,WAET,IAAMC,EAAmB,IAAIV,oBAAkB,CAChDC,QAAS,CACP,IAAIC,kBAKLQ,EAAiBH,iBAAiB,IAAIC,sBAAoBH,IAG1DK,EAAiBD,SAAS,CAC3BE,eAAgB,IAAIC,uBAGrBC,IAASC,OACR,kBAAC,IAAD,KACE,8BACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpD,IACjC,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,QAAQC,UAAWlD,MAGxCmD,SAASC,eAAe,W","file":"static/js/main.2de1a0d7.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 285;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>\n                Welcome to FoodFinder!\n            </h1>\n            <Link to='/find'><button>Enter</button></Link>\n        </div>\n    )\n\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Button, Row, Col } from 'reactstrap';\n\n\nconst gcpBase = 'https://healthy-earth-276916.ue.r.appspot.com';\nconst localBase = 'http://penguin.termina.linux.test:8080';\n\nclass FoodFinder extends Component {\n    constructor(){\n        super()\n        this.state = {\n            results: null,\n            isLoading: false\n        }\n    }\n\n    buttonHandler(ingredient) {\n        this.setState({isLoading: true})\n        // alert('fetching ' + ingredient);\n        fetch(gcpBase + '/find-server/' + ingredient)\n            .then(res => {\n                // alert(res);\n                let json = res.json()\n                // alert(json);\n                return json\n            }).then(data => {\n                // alert(\"then?\")\n                this.setState(\n                    {results: data, \n                    ingredient: ingredient,\n                    isLoading: false}\n                );\n            })\n    }\n\n    renderResults(){\n        if(this.state.isLoading){\n            return <div> Loading vendors...</div>;\n        }\n        if(this.state.results == null){ \n            return;\n        }\n        if(Object.keys(this.state.results).length === 0){\n            return <div>No vendors have {this.state.ingredient} in stock.</div>\n        }\n        let list = Object.entries(this.state.results).map(([key, value], i) => {\n            return (\n                <div>\n                    {key}: ${value.price}, Inventory of {value.stock}\n                </div>\n            )\n        });\n        return (\n            <div>\n                Vendors for: {this.state.ingredient}\n                <div>\n                    {list}\n                </div>\n            </div>\n        )\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Food Finder</h1>\n                <Row>\n                    <Col lg=\"3\">\n                        <Button onClick={() => this.buttonHandler('apple')}>\n                            Find Apples\n                        </Button>\n                    </Col>\n                    <Col md=\"3\">\n                        <Button onClick={() => this.buttonHandler('peach')}>\n                            Find Peaches\n                        </Button>\n                    </Col>\n                    <Col md=\"3\">\n                        <Button onClick={() => this.buttonHandler('pear')}>\n                            Find Pears\n                        </Button>\n                    </Col>\n                    <Col md=\"3\">\n                        <Button onClick={() => this.buttonHandler('flour')}>\n                            Find Flour\n                        </Button>\n                    </Col>\n                </Row>\n                <h2>Vendor Options:</h2>\n                <div id=\"results\">\n                    {this.renderResults()}\n                </div>\n            </div>\n        )\n    }\n\n}\n        \nexport default FoodFinder;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home';\nimport FoodFinder from './FoodFinder';\nimport { CollectorExporter } from '@opentelemetry/exporter-collector';\nimport { SimpleSpanProcessor } from '@opentelemetry/tracing';\nimport { DocumentLoad } from '@opentelemetry/plugin-document-load';\nimport { WebTracerProvider } from '@opentelemetry/web';\nimport { ConsoleSpanExporter } from '@opentelemetry/tracing';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\n\n// // Edit this to point to the app to the OpenTelemetry Collector address:\n// // If running locally use http://localhost:55678/v1/trace\n// const collectorURL = 'http://localhost:55678/v1/trace';\n// // const collectorURL = 'http://35.188.162.236/v1/trace';\n\n// const webTracer = new WebTracerProvider({\n//   plugins: [\n//     new DocumentLoad(),\n//   ],\n// });\n// const collectorOptions = {\n//   url: collectorURL,\n// };\n// const exporter = new CollectorExporter(collectorOptions);\n// webTracer.addSpanProcessor(new SimpleSpanProcessor(exporter));\n\n// Minimum required setup - supports only synchronous operations\nconst provider = new WebTracerProvider({\n\tplugins: [\n\t  new DocumentLoad()\n\t]\n  });\n\n  const collectorURL = 'http://35.225.210.248:80/v1/trace';\n  const collectorOptions = {\n\turl: collectorURL,\n\t};\nconst exporter = new CollectorExporter(collectorOptions);\n  \n  provider.addSpanProcessor(new SimpleSpanProcessor(exporter));\n  provider.register();\n  \n  const providerWithZone = new WebTracerProvider({\n\tplugins: [\n\t  new DocumentLoad()\n\t]\n  });\n\n  \n  providerWithZone.addSpanProcessor(new SimpleSpanProcessor(exporter));\n  \n  // Changing default contextManager to use ZoneContextManager - supports asynchronous operations\n  providerWithZone.register({\n\tcontextManager: new ZoneContextManager(),\n  });\n\nReactDOM.render(\n\t<Router>\n\t  <main>\n\t\t  <Route exact path='/' component={Home}/>\n\t\t  <Route exact path='/find' component={FoodFinder}/>\n\t  </main>\n\t</Router>\n,document.getElementById('root'));\n"],"sourceRoot":""}